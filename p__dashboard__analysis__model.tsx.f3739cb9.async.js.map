{"version":3,"sources":["src/pages/dashboard/analysis/service.tsx","src/pages/dashboard/analysis/model.tsx"],"names":["_umiRequest","_interopRequireDefault","__webpack_require__","fakeChartData","_callee","_regenerator","default","wrap","_context","prev","next","abrupt","stop","_service","Model","namespace","state","visitData","visitData2","salesData","searchData","offlineData","offlineChartData","salesTypeData","salesTypeDataOnline","salesTypeDataOffline","radarData","effects","fetch","mark","_","_ref","call","put","response","sent","type","payload","fetchSalesData","_ref2","_context2","reducers","save","_ref3","_objectSpread2","clear"],"mappings":"sNAAAA,EAAAC,EAAAC,EAAA,kBAEsBC,sFAAf,SAAAC,IAAA,OAAAC,EAAAC,QAAAC,KAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,UACE,EAAAX,EAAAM,SAAQ,yBADV,wBAAAE,EAAAI,SAAAR,sLCEPS,EAAAX,EAAA,QAoBMY,GACJC,UAAW,oBAEXC,OACEC,aACAC,cACAC,aACAC,cACAC,eACAC,oBACAC,iBACAC,uBACAC,wBACAC,cAGFC,SACGC,MADMvB,EAAAC,QAAAuB,KAAA,SAAAD,EACAE,EADAC,GAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAA7B,EAAAC,QAAAC,KAAA,SAAAC,GAAA,eAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEY,OADPsB,EADLD,EACKC,KAAMC,EADXF,EACWE,IADXzB,EAAAE,KAAA,EAEkBsB,EAAKnB,EAAAV,eAFvB,OAGL,OADM+B,EAFD1B,EAAA2B,KAAA3B,EAAAE,KAAA,EAGCuB,GACJG,KAAM,OACNC,QAASH,IALN,wBAAA1B,EAAAI,SAAAgB,KAQNU,eARMjC,EAAAC,QAAAuB,KAAA,SAAAS,EAQSR,EARTS,GAAA,IAAAP,EAAAC,EAAAC,EAAA,OAAA7B,EAAAC,QAAAC,KAAA,SAAAiC,GAAA,eAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OASY,OADEsB,EARdO,EAQcP,KAAMC,EARpBM,EAQoBN,IARpBO,EAAA9B,KAAA,EASkBsB,EAAKnB,EAAAV,eATvB,OAUL,OADM+B,EATDM,EAAAL,KAAAK,EAAA9B,KAAA,EAUCuB,GACJG,KAAM,OACNC,SACElB,UAAWe,EAASf,aAbnB,wBAAAqB,EAAA5B,SAAA0B,MAmBTG,UACEC,KADQ,SACH1B,EADG2B,GACe,IAATN,EAASM,EAATN,QACZ,SAAAO,EAAAtC,YACKU,EACAqB,IAGPQ,MAPQ,WAQN,OACE5B,aACAC,cACAC,aACAC,cACAC,eACAC,oBACAC,iBACAC,uBACAC,wBACAC,mBAMOZ","file":"p__dashboard__analysis__model.tsx.f3739cb9.async.js","sourcesContent":["import request from 'umi-request';\n\nexport async function fakeChartData() {\n  return request('/api/fake_chart_data');\n}\n","import { AnyAction, Reducer } from 'redux';\n\nimport { EffectsCommandMap } from 'dva';\nimport { AnalysisData } from './data.d';\nimport { fakeChartData } from './service';\n\nexport type Effect = (\n  action: AnyAction,\n  effects: EffectsCommandMap & { select: <T>(func: (state: AnalysisData) => T) => T },\n) => void;\n\nexport interface ModelType {\n  namespace: string;\n  state: AnalysisData;\n  effects: {\n    fetch: Effect;\n    fetchSalesData: Effect;\n  };\n  reducers: {\n    save: Reducer<AnalysisData>;\n    clear: Reducer<AnalysisData>;\n  };\n}\n\nconst Model: ModelType = {\n  namespace: 'dashboardAnalysis',\n\n  state: {\n    visitData: [],\n    visitData2: [],\n    salesData: [],\n    searchData: [],\n    offlineData: [],\n    offlineChartData: [],\n    salesTypeData: [],\n    salesTypeDataOnline: [],\n    salesTypeDataOffline: [],\n    radarData: [],\n  },\n\n  effects: {\n    *fetch(_, { call, put }) {\n      const response = yield call(fakeChartData);\n      yield put({\n        type: 'save',\n        payload: response,\n      });\n    },\n    *fetchSalesData(_, { call, put }) {\n      const response = yield call(fakeChartData);\n      yield put({\n        type: 'save',\n        payload: {\n          salesData: response.salesData,\n        },\n      });\n    },\n  },\n\n  reducers: {\n    save(state, { payload }) {\n      return {\n        ...state,\n        ...payload,\n      };\n    },\n    clear() {\n      return {\n        visitData: [],\n        visitData2: [],\n        salesData: [],\n        searchData: [],\n        offlineData: [],\n        offlineChartData: [],\n        salesTypeData: [],\n        salesTypeDataOnline: [],\n        salesTypeDataOffline: [],\n        radarData: [],\n      };\n    },\n  },\n};\n\nexport default Model;\n"],"sourceRoot":""}